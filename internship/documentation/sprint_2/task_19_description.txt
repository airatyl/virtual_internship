А можно ли еще улучшить расчет количества дней
между датами из предыдущего шага?

PS: напомним, на предыдущем шаге мы вынесли сам расчёт в отдельный метод.

Да можно! Очень часто алгоритмы выносят в отдельные классы.

Зачем это делается?

Класс это как крепость для алгоритма. У крепости есть только
ворота, через которые можно попасть внутрь крепости. Они обычно
не меняются со временем. А внутри крепости могут происходить
большие изменения (строиться новые дома, улицы и так далее).

Крепость - это класс.

Ворота - это публичная часть класса, которая доступна из вне.

Дома, улицы внутри - это приватная часть класса, которая с
наружи класса не видна (приватные свойства, методы и т.д.).

Вынесение алгоритма в отдельный класс дает возможность изменять
его внутреннюю реализацию отдельно от всего остального кода приложения.
Здания и улицы внутри крепости можно перестраивать как угодно и
сколько угодно. До тех пор, пока вы не сломаете стены или не
измените ворота крепости (публичные части класса), влияние
на внешний мир (другие классы) перестройка внутри не окажет.

В больших сложных приложениях это действительно классно, когда
вы можете менять одну часть приложения не затрагивая что-то другое.

И вынесение алгоритма в отдельный класс позволяет это делать!

Ваша задача: создайте новый класс (DateTimeService) рядом с
TravelCalculatePremiumServiceImpl и поместите в него
алгоритм расчёта числа дней между двумя датами.

Создайте тесты для нового класса!

PS: в данном шаге не надо изменять код в TravelCalculatePremiumServiceImpl.
Задача этого шага состоит в создании нового класса, копирования в
него алгоритма расчета числа дней между двумя датами и написание
тестов на этот алгоритм (для этого надо создать новый тестовый класс).

Использовать новый класс (DateTimeService) в
TravelCalculatePremiumServiceImpl мы будем в следующем шаге.

PS: быстро найти все изменения сделанные в текущем задании
можно в IDEA (закладка слева) выбрав папку текущего задания (например task_10)
и папку предыдущего задания (например task_9) и в сплывающем меню выбрав пункт
Compare Directories (Ctrl + D).

PS: не забудьте по окончанию выполнения шага создать и заполнить
файл /documentation/Task_x_description.txt. Формат заполнения этого
файла описан в task_1 в файле Learning_reflection.txt.

**Контекст задачи (краткое описание) **
TODO: опишите контекст и задачу своими словами в свободной форме.

необходимо было создать класс и скопировать в него метод расчета дней между Date и протестировать

**Что было сделано и как? (краткое описание)**
TODO: опишите что и как делали для того, чтобы выполнить задачу.

создан класс
public class DateTimeService {

    public static long calculateDaysBetweenDates(Date date1, Date date2){
        return ((date2.getTime() -date1.getTime())/(1000*60*60*24))-1;
    }
}
создан тестовый класс
class DateTimeServiceTest {

    @Test
    void calculateDaysBetweenDates() {
        long answer = DateTimeService.calculateDaysBetweenDates(new Date(2025, Calendar.JANUARY,20),new Date (2025, Calendar.JANUARY,29));
        assertEquals(8,answer);
    }
}

**Зачем это было сделано? Чему научился в процессе выполнения задания?**
TODO: опиши своими словами зачем было необходимо выполнить это задание,
опиши какие техники, технологии, инструменты, использовал для выполнения задания,
чему научился выполняя это задание?


**Сколько потратил времени на выполнение задачи?**
TODO: зафиксируй для себя сколько времени потратил на выполнение этого задания. Можно ли было его сделать быстрее?


**Заметки, идеи, предложения в свободной форме**
TODO: зафиксируй любые свои мысли, эмоции, идеи, размышления связанные с этим заданием.
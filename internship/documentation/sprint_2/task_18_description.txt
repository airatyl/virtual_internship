Скорее всего вы реализовали расчёт стоимости из предыдущего шага
следующим образом, поместив этот код внутри метода calculatePremium():

   long diff = request.getAgreementDateFrom().getTime() - request.getAgreementDateTo().getTime();
   var daysBetween = TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
   response.setAgreementPrice(new BigDecimal(daysBetween));

Как вы думаете, это решение хорошее или нет?
Перед тем как читать дальше, попробуйте привести аргументы
за и против этого решения.

В действительности этот код написан сугубо техническим языком.
У этого решения мало связи с бизнесом, за исключением названия
переменно daysBetween. В большом приложении (из тысяч классов)
найти такой код будет крайне сложно. Для понимания этого кода
потребуется дополнительные усилия и время.

Почему?

Для понимания этого кода вам нужно знать технические детали:
- Date.getTime() метод возвращает число миллисекунд в формате long;
- TimeUnit.DAYS.convert - конвертирует миллисекунды в дни;
- и так далее.

И это совсем простой код, всего пару строк кода. А что будет
если на вашем пути встретится более сложный алгоритм в реальном
приложении? И не один, а десятки каждый день! Сколько времени
и сил вы потратите на их изучение?

Можно ли улучшить этот код? ДА!

Ваша задача: вынесите код расчета количества дней между датами
в отдельный метод. Придумайте классное название этому методу.
Такое название, прочитав которое будет
сразу понятно, что этот метод делает.

Совет: как можно сделать код лучше? Разбейте его на небольшие
кусочки, поместите кусочки кода в методы и дайте этим метода
классные названия!

Совет: при написании кода ищите кусочки, которые делают маленькое,
но законченное действие. Выносите эти кусочки в отдельные методы.

PS: быстро найти все изменения сделанные в текущем задании
можно в IDEA (закладка слева) выбрав папку текущего задания (например task_10)
и папку предыдущего задания (например task_9) и в сплывающем меню выбрав пункт
Compare Directories (Ctrl + D).

PS: не забудьте по окончанию выполнения шага создать и заполнить
файл /documentation/Task_x_description.txt. Формат заполнения этого
файла описан в task_1 в файле Learning_reflection.txt.

**Контекст задачи (краткое описание) **
TODO: опишите контекст и задачу своими словами в свободной форме.

**Что было сделано и как? (краткое описание)**
TODO: опишите что и как делали для того, чтобы выполнить задачу.

    @Override
    public TravelCalculatePremiumResponse calculatePremium(TravelCalculatePremiumRequest request) {
        TravelCalculatePremiumResponse response = new TravelCalculatePremiumResponse(
                request.getPersonFirstName(),
                request.getPersonLastName(),
                request.getAgreementDateFrom(),
                request.getAgreementDateTo());
        response.setAgreementPrice(new BigDecimal( calculateDaysBetweenDates(response.getAgreementDateFrom(),response.getAgreementDateTo())));
        return response;

    }

    public long calculateDaysBetweenDates(Date date1,Date date2){
        return ((date2.getTime() -date1.getTime())/(1000*60*60*24))-1;
    }

**Зачем это было сделано? Чему научился в процессе выполнения задания?**
TODO: опиши своими словами зачем было необходимо выполнить это задание,
опиши какие техники, технологии, инструменты, использовал для выполнения задания,
чему научился выполняя это задание?


**Сколько потратил времени на выполнение задачи?**
TODO: зафиксируй для себя сколько времени потратил на выполнение этого задания. Можно ли было его сделать быстрее?


**Заметки, идеи, предложения в свободной форме**
TODO: зафиксируй любые свои мысли, эмоции, идеи, размышления связанные с этим заданием.
Ваше приложение взял на тестирование тестировщик.
Тестирование это важный этап в разработке программного обеспечения.
Тестировщик выявил следующую ошибку в работе вашего кода.

Даты в полях запроса: agreementDateFrom и agreementDateTo
можно указать в прошлом.

Получается страховку можно приобрести на путешествие в прошлое? :)

Очевидно это не правильно!

Логика подсказывает, что рассчитывать стоимость полиса
страхования в прошлом не имеет смысла.

Тестировщик уточнил это у бизнеса и получил положительный ответ.

Бизнес подтвердил, что расчёт стоимости полиса страхования
не должен основываться на датах из прошлого. Допустимы
только даты из будущего.

Ваша задача: реализовать соответствующую валидацию.

PS: не забудьте при реализации исправить все тесты.

PS: не забудьте по окончанию выполнения шага создать и заполнить
файл /documentation/Task_x_description.txt. Формат заполнения этого
файла описан в task_1 в файле Learning_reflection.txt.

====================================================================

Диалог ментора и стажера о неявных зависимостях в коде.

Стажер:
У меня сегодня была дилемма.
В задании нужно проверить, чтобы страховку можно
было оформить только в будущем.
При этом у нас есть метод, который проверяет,
чтобы дата до всегда была больше даты от.
И я пытался для себя решить. Достаточно ли мне
проверить только дату от (зная, что дата до
проверяется на то, что она больше даты от)
или же мне нужно проверить обе даты (и от и до)
на валидность, что они обе больше текущей даты.
По идее двойная проверка избыточна...


Ментор:
Если в бизнес требованиях есть обе проверки
то наверное стоит их обе и реализовать.

А что будет если кто-то уберет проверку,
что дата до всегда была больше даты от?
У тебя сломается логика! :)

То есть неявные (скрытые) зависимости между
частями кода и их логикой это в общем то плохо.


Стажер: Да, хорошее замечание!


Ментор:
Поменял один кусок кода, явных связей с другим
куском кода нет - а стрельнуло потом на проде
совершенно в другом месте.

А тот кто будет менять в будущем один кусок кода,
он то об этой неявной зависимости явно знать не будет.

Или делаешь явную зависимость в коде, что бы было
это видно из кода либо просто дублируешь.

В любом случае надо сделать так, чтобы все явно было видно в коде.

В общем код все должен делать явно, иначе можно получить проблемы.

Это хорошее правило подумать о том, как ваш код может в будущем
изменяться, как просто или сложно его будет поддерживать и как
решения, которые вы принимаете сейчас повлияют на этот процесс
в будущем!



**Контекст задачи (краткое описание) **
TODO: опишите контекст и задачу своими словами в свободной форме.

**Что было сделано и как? (краткое описание)**
TODO: опишите что и как делали для того, чтобы выполнить задачу.

**Зачем это было сделано? Чему научился в процессе выполнения задания?**
TODO: опиши своими словами зачем было необходимо выполнить это задание,
опиши какие техники, технологии, инструменты, использовал для выполнения задания,
чему научился выполняя это задание?


**Сколько потратил времени на выполнение задачи?**
TODO: зафиксируй для себя сколько времени потратил на выполнение этого задания. Можно ли было его сделать быстрее?


**Заметки, идеи, предложения в свободной форме**
TODO: зафиксируй любые свои мысли, эмоции, идеи, размышления связанные с этим заданием.
Ментор обращает ваше внимание на то, что у классов
валидаций почти одинаковая публичная часть. У них у всех есть
один публичный метод, который принимает в качестве параметра
запрос и возвращает в качестве результата Optional<ValidationError>.

Ваша задача:
1) сделать для всех классов валидаций общий интерфейс
(метод в интерфейсе можно назвать execute(...);
2) новый интерфейс поместить в пакет core/validations;
3) сделать новый интерфейс public;
4) сделать все классы валидаций packege level access
(убрать public с классов, чтобы они были доступны только внутри пакета);
5) В классе TravelCalculatePremiumRequestValidator в конструктор класса
добавьте параметр List<TravelRequestValidation> travelValidations
и сохраните его в свойство:

    private List<TravelRequestValidation> travelValidations;

Так как все классы валидации реализуют новый интерфейс и являются
компонентами в Spring (@Component), то Spring позволяет вот таким
способом получить список всех объектов (классов), которые реализуют
указанный интерфейс и являются компонентами.

Так как нам не принципиально в каком порядке применять валидации,
главное просто применить их все, то мы можем просто пройти по
списку полученных классов валидаций и просто применить каждую
для валидации запроса. Реализуйте это в классе
TravelCalculatePremiumRequestValidator.
Исправьте тесты если они перестанут работать.

Благодаря публичному интерфейсу и дизайн паттерну IoC нам
удалось скрыть (сделать package level access) конкретные реализации
интерфейса и поместить их в отдельный пакет. Это отличный архитектурный
приём создания модуля внутри приложения. Запомните его и пользуйтесь им.

PS: быстро найти все изменения сделанные в текущем задании
можно в IDEA (закладка слева) выбрав папку текущего задания (например task_10)
и папку предыдущего задания (например task_9) и в сплывающем меню выбрав пункт
Compare Directories (Ctrl + D).

PS: не забудьте по окончанию выполнения шага создать и заполнить
файл /documentation/Task_x_description.txt. Формат заполнения этого
файла описан в task_1 в файле Learning_reflection.txt.

**Контекст задачи (краткое описание) **
TODO: опишите контекст и задачу своими словами в свободной форме.

**Что было сделано и как? (краткое описание)**
TODO: опишите что и как делали для того, чтобы выполнить задачу.

**Зачем это было сделано? Чему научился в процессе выполнения задания?**
TODO: опиши своими словами зачем было необходимо выполнить это задание,
опиши какие техники, технологии, инструменты, использовал для выполнения задания,
чему научился выполняя это задание?


**Сколько потратил времени на выполнение задачи?**
TODO: зафиксируй для себя сколько времени потратил на выполнение этого задания. Можно ли было его сделать быстрее?


**Заметки, идеи, предложения в свободной форме**
TODO: зафиксируй любые свои мысли, эмоции, идеи, размышления связанные с этим заданием.
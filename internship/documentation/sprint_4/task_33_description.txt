Диалог с ментором об альтернативных решениях.


Стажер:
Привет, возник такой вопрос в процессе разработки.
Я на этапе введения проверок на даты
(проверить дату отъезда и приезда) и смотря на код,
я понимаю, что у меня 2 абсолютно идентичных куска
кода по функционалу(аналогично и с именами).
Мне говорили, что по-хорошему таких методов быть
не должно. Методов в которых код очень похож. Которые
выполняют одни и те же вещи. Дубликация кода это плохо.
Я решил вместо 4 методов написать 2 и вот что у меня вышло:

@Component
public class TravelCalculatePremiumValidator {
    public List<ValidationError> validate(TravelCalculatePremiumRequest request) {
        List<ValidationError> errors = new ArrayList<>();
        validatePersonName(request.getPersonFirstName(), "personFirstName", "Must not be empty!").ifPresent(errors::add);
        validatePersonName(request.getPersonLastName(), "personLastName", "Must not be empty!").ifPresent(errors::add);
        validateDate(request.getAgreementDateFrom(), "agreementDateFrom", "Must not be empty!").ifPresent(errors::add);
        validateDate(request.getAgreementDateTo(), "agreementDateTo", "Must not be empty!").ifPresent(errors::add);
        return errors;
    }

    public Optional<ValidationError> validatePersonName(String field, String errorField, String errorMessage) {
        return (field == null || field.isEmpty())
                ? Optional.of(new ValidationError(errorField, errorMessage))
                : Optional.empty();

    }

    public Optional<ValidationError> validateDate(Date date, String errorField, String errorMessage) {
        return date == null
                ? Optional.of(new ValidationError(errorField, errorMessage))
                : Optional.empty();
    }
}



Теперь у меня возникает 2 вопроса:
1. Целесообразно так делать в принципе или моя оптимизация кода излишняя?

2. Если же я решил оставить такие методы, то в тестах теперь
нет нужды проверять каждый раз отдельно имя, отдельно фамилию
и аналогично с датами?


Ментор:
Привет! Отличный вопрос. Давай поговорим на эту тему.
Ну смотри ... У тебя есть бизнес требования.
Бизнес требования могут быть похожи друг на друга.
Далее тебе надо эти бизнес требования реализовать в коде.

Есть два варианта реализации:

Первый вариант: оптимизировать убрать повторяющиеся методы.

Второй вариант: реализовать каждое бизнес требование
отдельно друг от друга.

Давай рассуждать дальше!

Какие плюсы и минусы у этих подходов?


Стажер:
Думаю, что логично для начала хотя бы реализовать
каждое, а потом уже заниматься оптимизацией,
когда мы видим где и как используются методы.


Ментор:
У первого подхода меньше кода, нет повторений, но!
Появляются технические зависимости между
бизнес требованиями их реализацией основанной на общем коде.

Стажер: Да, есть такое!

Ментор:
А что это значит? А это значит, что в будущем если
одно из требований изменится, то придется менять код
и это затронет и другие требования.

Плюс то, что техническое решение начнет отличаться
от бизнесс решения. В бизнес решении нет связи между
этими требованиями, а в коде мы ее ввели.

Стажер: Нам эти связи жизни не упростят. В будущем так точно!

Ментор:
Расхождение бизнес решения и технического решения
в общем контексте приложения ведет к тому, что
техническое решение все дальше удаляется от бизнесс решения,
они становятся все более разными.

Можно так все оптимизировать, что черт ногу сломит
и оба решения будут в корне не похожи друг на друга.

Поддерживать такое техническое решение будет сущим
адом в сложных системах. Так как нельзя будет просто
и легко найти какой кусок кода реализует то или другое
бизнес требование.

Теперь вернемся ко второму решению.

Да в нем есть дублирование кода!

Что плохо с одной стороны.

Но! Оно очень сильно похоже на бизнес требования ...
Что является очевидным плюсом!

Изменится одно требование, пойдем в код и поменяем
только код относящийся к этому требованию.

И это не затронет другие требования.

Стажер:
И не придется переделывать кучу других кусков кода!

Ментор:
В реальности при разработке технического решения
мы всегда балансируем между тем, что бы все сделать
круто с технической стороны и тем, чтобы наше
техническое решение было максимально похоже
на бизнес процесс, который мы автоматизируем.

Уходя в одну из сторон тебе явно нужно будет
жертвовать другой.

Надо искать баланс между этими двумя крайностями!

С этим ты не раз еще столкншся в реальных проектах.

В принципе нахождение оптимального баланса между
этими двумя вещами это и есть настоящее искусство
создания программ. :)

Этому в университетах не учат! :)

Стажер:
пффф, если бы кто-то об этом сказал в универе, я бы удивился!

Ментор:
Это можно увидеть, прочувствовать и понять только на практике.

Стажер:
Вспоминая практику в универе, просто нет случаев,
схожих с реальной разработкой, чтобы обращать
внимания на такие детали.

Ментор:
В общем clean code и все эмпирические правила
написания кода это не аксиомы, любое решение можно
реализовать по-разному, код можно написать миллионом
разных способов!

И от деталей реализации будет зависеть то, что ты получишь.

Конечное решение всегда обладает конкретными качествами,
своими плюсами и минусами.

А вот что тебе нужно в конкретной ситуации решать
придется тебе самому.

И это будет зависеть от более общего контекста.

Стажер:
Тогда резюмируя, получаем:
Нужно сделать техническое решения максимально
близким к бизнесс решениям, при этом учитывая
оптимизацию в зависимости от конкретной ситуации.

Ментор:
Вот поэтому студенты совершенно не подготовлены
к реальным проектам. Обучение у них проходит на
оторванных от реальности примерах.

Резюмируя: есть две крайности технической реализации.

Чисто техническое решение, которое скорее всего
будет далеко от бизнесс процесс не похоже на него.

И вторая крайность техническое решение полностью
копия бизнес процесса.

У каждого решения есть свои плюсы и минусы!

И тебе надо их представлять и найти между ними баланс.

Баланс зависит от контекста.

Стажер: Понял!

Ментор:
Самое важное что ты должен понять, это то что выбранное тобой
решение обладает определенными характеристиками.

Плюсами и минусами.

Учись их видеть в технических решениях, которые ты принимаешь.

Учись искать альтернативы.

Сравнить два решения можно только тогда когда они у тебя есть.

Тогда можно определить плюсы и минусы каждого
и в зависимости от контекста выбрать более лучшее решение
в данный момент.

Понимая к чему оно приведет при реализации.

Это высший пилотаж в программировании.

:)

Те кто этого непонимают лепят системы как придется
как умеют без видения альтернативных вариантов решения.

А они всегда есть! :)

Это же ИТ!

Стажер:
Теперь есть определенное понимание таких ситуаций,
осталось только с ними столкнуться. :)

Ментор: Продолжай делать проект!

Это приходит с опытом.

Стажер: Спасибо!

Ментор:
Пытайся оценивать каждое решение и искать его
альтернативы и их тоже оценивать, потом сравнивать
плюсы минусы каждого из решений.

Это опыт.

И последнее - если ты невидишь альтернативы
это не значит что ее нет!

Это значит что у тебя просто не хватает знаний,
опыта или контекста. Тут придется искать помощи во вне.


============================================================


Стажер из компании прошедший это проект:

Последнее про то что не видно альтернативы это да,
блин, прочитала это, тут такой несложный предмет разговора,
а мне дочерние контексты с бинами в спринге поднимать,
возможно сегодня что-то сделаю, хоть и выходной.

Кстати разговаривали в пятницу с руководителем,
он сказал что ему нравиться как я быстро влилась в работу,
сказал что надо немного расслабиться и делать больше
в удовольствие. Поговорили про итог стажировки, сказал
если буду продолжать в том же духе, то будет всё хорошо,
но и сразу предупредил что с большой вероятностью вакансии
в команде после моей стажировки не будет, но сказал что
такие ситуации не редкие и будут искать место в другой
команде если я хорошо справлюсь со своей задачей.

Ментор:
Предмет не сложный, но его можно обобщить на любую задачу и на твою тоже.

Ментор:
Это общая проблема, когда человек может представить,
придумать только то на что хватает его опыта и знаний.

Ментор:
Он не может придумать решение выходящее за границы его
собственных возможностей.

Ментор:
Вот тут то и нужна коллаборация с другими людьми.

Ментор:
Что бы вместе придумать более качественное решение проблемы.

Ментор:
Мотай на ус и помни то что твои знания и опыт
всегда ограничены и ты просто не можешь видеть
альтернатив за их пределами.

Ментор:
Поэтому надо постоянно развиваться, чтобы раздвигать
свои границы и эффективно взаимодействовать с другими людьми для того,
чтобы находить решения вне твоей зоны комфорта.




**Контекст задачи (краткое описание) **
TODO: опишите контекст и задачу своими словами в свободной форме.

**Что было сделано и как? (краткое описание)**
TODO: опишите что и как делали для того, чтобы выполнить задачу.

**Зачем это было сделано? Чему научился в процессе выполнения задания?**
TODO: опиши своими словами зачем было необходимо выполнить это задание,
опиши какие техники, технологии, инструменты, использовал для выполнения задания,
чему научился выполняя это задание?


**Сколько потратил времени на выполнение задачи?**
TODO: зафиксируй для себя сколько времени потратил на выполнение этого задания. Можно ли было его сделать быстрее?


**Заметки, идеи, предложения в свободной форме**
TODO: зафиксируй любые свои мысли, эмоции, идеи, размышления связанные с этим заданием.